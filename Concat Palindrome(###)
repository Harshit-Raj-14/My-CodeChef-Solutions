/* JAVA ACCEPTED SOLUTION */
import java.util.*;

class Codechef {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-->0){
			int al=sc.nextInt();
			int bl=sc.nextInt();
			String a=sc.next();
			String b=sc.next();
            
            if(al<bl){  //we want our first stirng to always be the largest so swap strings if bl>al.   //Reason:so tha tthe longest is of odd length and so will have the odd char
                String temp=a;
                a=b;
                b=temp;           
            }

            int []count = new int[26];
			for(int i=0;i<a.length();i++){
				count[(int)a.charAt(i) - 'a']++;		//making a count array of chars in string indexed from 0 and adding number of chars from a
			}

            for(int i=0;i<b.length();i++){
                count[(int)b.charAt(i) - 'a']--;    //subtracting number of chars from b
            }

            int odd =0;
            int flag = 1;
            for(int i=0;i<26;i++){
                if(count[i]<0) flag=0;
                if(count[i]%2==1) odd++;
            }
            if(flag!=1 || odd>1) System.out.println("NO");
            else System.out.println("YES");
        }
    }
}     
  
/*
 * Storing the frequency of string a in count[] and then decreasing the frequency from the same count[] from stirng b.
 * 
 * If the values are negative for any character then that means that character was not present in both strings, because remember b here is the smaller string.
 * So no testcase like: aa aaaaaa can give negative value.
 * 
 * since a length> b length; this means that a will always have that one unique odd char whose count cna be checked later
 * By subtracting the char's from string b in count we make sure that there are no unique chars in b that are not availble in a
 * if we do not do this and just add up everything and check whewther they are evne or not
 * we might not catch : aabbcc dd. this will not yield a palindrome on combination
 * 
 * Just check if the number of occurrence is even or not if more than one element has odd occurrence then print "NO" else print "YES"
 */
            
                     
	    

/* FAILED SOLUTION ON TESTCASE 2 */
import java.util.*;

class Codechef {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-->0){
			int alen=sc.nextInt();
			int blen=sc.nextInt();
			String a=sc.next();
			String b=sc.next();
			String c=a+b;

			if(c.length()==2){		//edge case
				System.out.println("YES");
				return;
			}
		
			int []count = new int[26];
			for(int i=0;i<c.length();i++){
				count[(int)c.charAt(i) - 97]++;		//making a count array of chars in string indexed from 0
			}

			int oneodd=0;
			for(int i=0;i<count.length;i++){
				if(count[i]%2!=0) oneodd++;	
			}
	
			if(oneodd>1) System.out.println("NO");
			else System.out.println("YES");
		}
			sc.close();	
	}
}


/*
 * a and b two string.
 * a1 and b1 are its possible rearrangement in any form does not matter. we have all freedom.
 * 
 * Case I: a1+b1 = 2(no. of each character) => when length of string is even =>palindrome
 * 
 * Case II: a1+b1 length is odd. So if one odd character then palindrome still possible. eg: aba
 * But if oneodd>1 then it cannot be palindrome
 * 
 * Rememerb: ther eis an edgecase : only two letters in string : a 1char and b 1char eg: zx and xz is palindrome
 * But this would result in oddone>1 so write a seperate case for it 
 * 
 */
 
 REASON FOR FAILURE : Read the question proerly it is written we have to see whether first arrangign A and B and then concatenating it gives palidnrome or not. 
 In the above solution we have first concatenated and then checked.
 Simple, solution would be to check both a and b seperately and then concatenate and then check.
 
 
 link - https://www.codechef.com/problems/CONCATPAL
