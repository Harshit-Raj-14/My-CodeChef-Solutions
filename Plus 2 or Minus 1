class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
		    int x = sc.nextInt();
		    if(x==0){
		        System.out.println(1);
		        continue;
		    }
		    System.out.println(2*x + x);
		}
	}
}

LOGIC --- The form of ans is 
0	1
1	3 => 2(1) +1
2	6 => 2(2) +2
3	9 => 2(3) +3	and so on.

So, the form is (2*x + x) => (x possibilites by only decrementing) + (x possibilities only by incrementing) + ((x-1) possiblity by mixing inc and dec) + (1 count the number itself)
Also, x=0 is an edge case.

if x==0 then there will be only 1 value . else we can either choose only increment operation x ways and decrement operations x ways . 
Combination of increment and decrement operation can be done in x-1 ways. Therefore total ways for at most x operations are 1+2*x+(x-1).



/* OTHER SOLUTIONS */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
		    int a=sc.nextInt();
		    if(a==0)
		        System.out.println("1");
		    else
		        System.out.println(a*3);
		        
		    
		}
	}
}
LOGIC - The chef has 2 types of moves ,the chef can have +2 or -1 operation for given no. 
For 1 move he has 3 possibilities ,for two moves 3*2=6 possibilities and so on. Therefore solution is input3.The only corner case if for input 0 for that the code statically check and print 1 as output.
