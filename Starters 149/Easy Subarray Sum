import java.util.*;

class Codechef {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            int pos = 0, neg = 0;
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
                if (arr[i] > 0) pos++;
                else if (arr[i] < 0) neg++;
            }
            if (pos == 0) {
                System.out.println(0);
                continue;
            }
            int necessaryNegs = 0;
            int left = 0, right = n - 1;
            // Find first positive from the left
            while (left < n && arr[left] <= 0) {
                left++;
            }
            // Find first positive from the right
            while (right >= 0 && arr[right] <= 0) {
                right--;
            }
            // Count necessary negatives strictly between first and last positive
            for (int i = left; i <= right; i++) {
                if (arr[i] < 0) {
                    necessaryNegs++;
                }
            }
            System.out.println(necessaryNegs);
        }
    }
}

/*
LOGIC---
The only necessary negs we need to apply operation to get maximum subarray sum would lie between the first positive and the last positive.
*/
